# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
imports:
    - { resource: 'parameters.yaml' }
parameters:
    ~
services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $gesdinetJWTRefreshTokenEntityClass: 'App\Override\Gesdinet\JWTRefreshTokenBundle\Entity\RefreshToken'
            $jWTTokenTTL: '%env(int:JWT_TOKEN_TTL)%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\Override\Gesdinet\JWTRefreshTokenBundle\Doctrine\RefreshTokenManager:
        decorates: 'gesdinet.jwtrefreshtoken.refresh_token_manager'
        autoconfigure: false
    App\Override\ApiPlatform\Core\OpenApi\Serializer\OpenApiNormalizer:
        decorates: 'api_platform.openapi.normalizer'
        calls:
            - setDecorationInner: [ '@App\Override\ApiPlatform\Core\OpenApi\Serializer\OpenApiNormalizer.inner' ]
        autoconfigure: false
    App\Override\Gesdinet\JWTRefreshTokenBundle\EventListener\AttachRefreshTokenOnSuccessListener:
        decorates: 'gesdinet.jwtrefreshtoken.send_token'
        arguments: [ "@gesdinet.jwtrefreshtoken.refresh_token_manager", "%gesdinet_jwt_refresh_token.ttl%", "@validator", "@request_stack", "%gesdinet_jwt_refresh_token.user_identity_field%", "%gesdinet_jwt_refresh_token.token_parameter_name%", "%gesdinet_jwt_refresh_token.single_use%" ]
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_success, method: attachRefreshToken }
        calls:
            - setDecorationInner: [ '@App\Override\Gesdinet\JWTRefreshTokenBundle\EventListener\AttachRefreshTokenOnSuccessListener.inner' ]
        autoconfigure: false
    App\Override\Gesdinet\JWTRefreshTokenBundle\Service\RefreshToken:
        decorates: 'gesdinet.jwtrefreshtoken'
        arguments: [ "@gesdinet.jwtrefreshtoken.authenticator", "@gesdinet.jwtrefreshtoken.user_provider", "@lexik_jwt_authentication.handler.authentication_success", "@lexik_jwt_authentication.handler.authentication_failure", "@gesdinet.jwtrefreshtoken.refresh_token_manager", "%gesdinet_jwt_refresh_token.ttl%", "%gesdinet_jwt_refresh_token.security.firewall%", "%gesdinet_jwt_refresh_token.ttl_update%", "@event_dispatcher", '@App\Service\Api\Security\Auth\LogoutService' ]
        autoconfigure: false
    App\Kernel\EventListener\LexikJWTAuthentication\OnJWTCreated:
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_created, method: onJWTCreated }
    App\Kernel\EventListener\LexikJWTAuthentication\OnJWTDecoded:
        calls:
            - setChainTokenExtractor: [ '@lexik_jwt_authentication.extractor.chain_extractor' ]
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_decoded, method: onJWTDecoded }
